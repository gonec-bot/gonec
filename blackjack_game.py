# –§–∞–π–ª: blackjack_game.py

import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from game_base import Game # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ë–ª—ç–∫–¥–∂–µ–∫–∞ ---
SUITS = {"hearts": "‚ô•Ô∏è", "diamonds": "‚ô¶Ô∏è", "clubs": "‚ô£Ô∏è", "spades": "‚ô†Ô∏è"}
RANKS = {"2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9, 
         "10": 10, "J": 10, "Q": 10, "K": 10, "A": 11}

def _create_deck():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É –∏–∑ 52 –∫–∞—Ä—Ç."""
    deck = [(suit, rank) for suit in SUITS for rank in RANKS]
    random.shuffle(deck)
    return deck

def _get_hand_properties(hand):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä—É–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ '–º—è–≥–∫–æ–π'."""
    value = sum(RANKS[card[1]] for card in hand)
    num_aces = sum(1 for card in hand if card[1] == 'A')
    
    while value > 21 and num_aces:
        value -= 10
        num_aces -= 1
    
    is_soft = num_aces > 0
    return value, is_soft

def _render_hand(hand, is_dealer_initial=False):
    """–ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏ –∏—Ö —Å—É–º–º—É."""
    if is_dealer_initial:
        return f"{SUITS[hand[0][0]]}{hand[0][1]}  [?]"
    
    cards_str = "  ".join(f"{SUITS[suit]}{rank}" for suit, rank in hand)
    value, _ = _get_hand_properties(hand)
    value_str = f" (*{value}*)"
    if value > 21:
        value_str = f" (*–ü–µ—Ä–µ–±–æ—Ä: {value}*)"
    elif len(hand) == 2 and value == 21:
        value_str = " (*–ë–ª—ç–∫–¥–∂–µ–∫!*)"
        
    return f"{cards_str}{value_str}"


class BlackjackGame(Game):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ –ë–ª—ç–∫–¥–∂–µ–∫.
    """
    def get_rules_text(self, balance: int, bet: int) -> str:
        bet_text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{bet:,}* –¥—É–∫–∞—Ç–æ–≤." if bet > 0 else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å."
        return (
            f"üÉè *–ë–ª—ç–∫–¥–∂–µ–∫* üÉè\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:,}* –¥—É–∫–∞—Ç–æ–≤.\n"
            f"{bet_text}\n\n"
            "*–¶–µ–ª—å:* –Ω–∞–±—Ä–∞—Ç—å –æ—á–∫–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —É –¥–∏–ª–µ—Ä–∞, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ 21.\n"
            "- *–ë–ª—ç–∫–¥–∂–µ–∫* (–¢—É–∑ + 10) –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 3 –∫ 2.\n"
            "- –û–±—ã—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 1 –∫ 1.\n"
            "- –î–∏–ª–µ—Ä –æ–±—è–∑–∞–Ω –±—Ä–∞—Ç—å –¥–æ 16 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏ –Ω–∞ '–º—è–≥–∫–∏–µ 17', –∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ '–∂–µ—Å—Ç–∫–∏—Ö 17' –∏ –≤—ã—à–µ."
        )

    def get_game_keyboard(self, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã."""
        state = context.user_data.get('blackjack_state')

        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (—Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–¥–∞—Ç—å"
        if not state:
            current_bet = context.user_data.get('current_bet', 0)
            bet_text = f"–°—Ç–∞–≤–∫–∞: {current_bet:,}" if current_bet > 0 else "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
            keyboard = [
                [InlineKeyboardButton(bet_text, callback_data='do_nothing')],
                # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç `play` —Å action='start'
                [InlineKeyboardButton("üÉè –†–∞–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—ã", callback_data=f'game:play:{self.id}:start')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ò–≥—Ä–æ–≤–æ–π –ö–ª—É–±", callback_data='nav:games')]
            ]
            return InlineKeyboardMarkup(keyboard)

        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã
        if state.get('game_over', True):
            return self.get_replay_keyboard() 
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
        buttons = [
            InlineKeyboardButton("‚ûï –í–∑—è—Ç—å –µ—â—ë", callback_data=f'game:play:{self.id}:hit'),
            InlineKeyboardButton("‚úã –•–≤–∞—Ç–∏—Ç", callback_data=f'game:play:{self.id}:stand')
        ]
        if state.get('can_double'):
            buttons.append(InlineKeyboardButton("üí∞ –£–¥–≤–æ–∏—Ç—å", callback_data=f'game:play:{self.id}:double'))
        
        return InlineKeyboardMarkup([buttons])

    async def _start_new_hand(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ –±–ª—ç–∫–¥–∂–µ–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞."""
        query = update.callback_query
        user_id = query.from_user.id
        bet = context.user_data.get('current_bet', 0)
        balance = self.user_manager.get_user_balance(user_id)

        if not bet or bet <= 0:
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É!", show_alert=True)
            return

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
        if bet > balance:
            # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_text = (
                f"‚ùå *–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏!*\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å (*{balance:,}*) —Ç–µ–ø–µ—Ä—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ *{bet:,}* –¥—É–∫–∞—Ç–æ–≤.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤—É—é, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É."
            )
            # 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
            context.user_data.pop('current_bet', None)
            # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            context.user_data.pop('blackjack_state', None)
            # 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            context.user_data['game_state'] = f'awaiting_bet:{self.id}'

            # 5. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —ç—Ç–∞–ø—É –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
            await query.edit_message_text(
                text=error_text,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ò–≥—Ä–æ–≤–æ–π –ö–ª—É–±", callback_data='nav:games')]])
            )
            return
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        deck = _create_deck()
        player_hand = [deck.pop(), deck.pop()]
        dealer_hand = [deck.pop(), deck.pop()]

        # –°—Ç–∞–≤–∫–∞ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –º–æ–º–µ–Ω—Ç —Ä–∞–∑–¥–∞—á–∏
        self.user_manager.update_user_balance(user_id, -bet)
        balance_after_bet = self.user_manager.get_user_balance(user_id)

        context.user_data['blackjack_state'] = {
            'deck': deck, 'player_hand': player_hand, 'dealer_hand': dealer_hand,
            'bet': bet, 'game_over': False, 'doubled': False,
            'can_double': balance_after_bet >= bet
        }
        
        player_value, _ = _get_hand_properties(player_hand)
        
        if player_value == 21:
            await self._end_game(update, context)
        else:
            await self._render_game_state(update, context)

    async def _render_game_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ª–∞."""
        query = update.callback_query
        state = context.user_data['blackjack_state']
        user_id = query.from_user.id
        current_balance = self.user_manager.get_user_balance(user_id)
        
        text = (
            f"–í–∞—à–∞ —Ä—É–∫–∞: {_render_hand(state['player_hand'])}\n"
            f"–†—É–∫–∞ –¥–∏–ª–µ—Ä–∞: {_render_hand(state['dealer_hand'], is_dealer_initial=True)}\n\n"
            f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: *{state['bet']:,}* –¥—É–∫–∞—Ç–æ–≤.\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{current_balance:,}* –¥—É–∫–∞—Ç–æ–≤."
        )
        await query.edit_message_text(text, reply_markup=self.get_game_keyboard(context), parse_mode='Markdown')

    async def _dealer_turn(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ –¥–∏–ª–µ—Ä–∞."""
        state = context.user_data['blackjack_state']
        while True:
            dealer_value, is_soft = _get_hand_properties(state['dealer_hand'])
            if dealer_value > 17 or (dealer_value == 17 and not is_soft):
                break
            state['dealer_hand'].append(state['deck'].pop())
        await self._end_game(update, context)

    async def _end_game(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É."""
        query = update.callback_query
        user_id = query.from_user.id
        state = context.user_data.get('blackjack_state')
        if not state or state.get('game_over'): return

        state['game_over'] = True
        
        player_value, _ = _get_hand_properties(state['player_hand'])
        dealer_value, _ = _get_hand_properties(state['dealer_hand'])
        player_busted = player_value > 21
        dealer_busted = dealer_value > 21
        player_has_blackjack = player_value == 21 and len(state['player_hand']) == 2 and not state['doubled']
        dealer_has_blackjack = dealer_value == 21 and len(state['dealer_hand']) == 2

        result_text = f"–í–∞—à–∞ —Ä—É–∫–∞: {_render_hand(state['player_hand'])}\n–†—É–∫–∞ –¥–∏–ª–µ—Ä–∞: {_render_hand(state['dealer_hand'])}\n\n"
        
        payout = 0
        bet = state['bet']
        
        if player_busted:
            result_text += "üò• *–ü–µ—Ä–µ–±–æ—Ä!* –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            payout = 0
        elif player_has_blackjack and not dealer_has_blackjack:
            result_text += "ü§ë *–ë–õ–≠–ö–î–ñ–ï–ö!* –í—ã–∏–≥—Ä—ã—à 3 –∫ 2!"
            payout = bet + int(bet * 1.5) # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ + –≤—ã–∏–≥—Ä—ã—à 1.5x
        elif dealer_busted:
            result_text += "üéâ *–ü–æ–±–µ–¥–∞!* –£ –¥–∏–ª–µ—Ä–∞ –ø–µ—Ä–µ–±–æ—Ä."
            payout = bet * 2 # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ + –≤—ã–∏–≥—Ä—ã—à 1x
        elif dealer_has_blackjack and not player_has_blackjack:
             result_text += "üò• *–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!* –£ –¥–∏–ª–µ—Ä–∞ –±–ª—ç–∫–¥–∂–µ–∫."
             payout = 0
        elif player_value > dealer_value:
            result_text += "üéâ *–ü–æ–±–µ–¥–∞!* –í–∞—à–∏ –æ—á–∫–∏ –≤—ã—à–µ."
            payout = bet * 2
        elif player_value < dealer_value:
            result_text += "üò• *–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!* –û—á–∫–∏ –¥–∏–ª–µ—Ä–∞ –≤—ã—à–µ."
            payout = 0
        else: # –ù–∏—á—å—è
            result_text += "üòê *–ù–∏—á—å—è (Push)!* –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞."
            payout = bet

        if payout > 0:
            self.user_manager.update_user_balance(user_id, payout)
            
        final_balance = self.user_manager.get_user_balance(user_id)
        result_text += f"\n\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{final_balance:,}* –¥—É–∫–∞—Ç–æ–≤."
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã
        context.user_data.pop('blackjack_state', None)
        context.user_data.pop('current_bet', None)

        await query.edit_message_text(result_text, reply_markup=self.get_replay_keyboard(), parse_mode='Markdown')

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ –¥–ª—è —É–∂–µ –∏–¥—É—â–µ–π –∏–≥—Ä—ã."""
        query = update.callback_query
        user_id = query.from_user.id
        action = query.data.split(':')[-1]
        
        if action == 'start':
            await self._start_new_hand(update, context)
            return
            
        state = context.user_data.get('blackjack_state')
        if not state or state.get('game_over'):
            await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.", show_alert=True)
            return

        state['can_double'] = False

        if action == 'hit':
            state['player_hand'].append(state['deck'].pop())
            if _get_hand_properties(state['player_hand'])[0] > 21:
                await self._end_game(update, context)
            else:
                await self._render_game_state(update, context)
        
        elif action == 'stand':
            await self._dealer_turn(update, context)

        elif action == 'double':
            original_bet = state['bet']
            balance = self.user_manager.get_user_balance(user_id)
            if balance < original_bet:
                 await query.answer(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {original_bet:,} –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è!", show_alert=True)
                 state['can_double'] = True
                 return
            
            self.user_manager.update_user_balance(user_id, -original_bet)
            state['bet'] *= 2
            state['doubled'] = True
            state['player_hand'].append(state['deck'].pop())
            
            await query.answer(f"–°—Ç–∞–≤–∫–∞ —É–¥–≤–æ–µ–Ω–∞ –¥–æ {state['bet']:,}! –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É.", show_alert=True)
            
            if _get_hand_properties(state['player_hand'])[0] > 21:
                await self._end_game(update, context)
            else:
                await self._dealer_turn(update, context)