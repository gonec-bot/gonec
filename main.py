# —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞–∂–º–∏ cntrl+C, —Ç–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –µ—ë –∞–≤–∞—Ä–∏–π–Ω–æ...
# main.py

# --- 1. –ò–ú–ü–û–†–¢–´ ---

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
import logging
import os
from datetime import datetime, timedelta
from abc import ABC, abstractmethod # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–∞—Ö, –ø–æ–ª–µ–∑–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from dotenv import load_dotenv
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    TypeHandler,
    MessageHandler,
    filters,
    JobQueue
)
from telegram.request import HTTPXRequest

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from game_base import UserDataManager # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ UserDataManager –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ game_base.py
from minigames import DiceGame, RouletteGame, CoinFlipGame
from blackjack_game import BlackjackGame
from academic_race_game import AcademicRaceGame

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ò –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.getenv() ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID_TGBOT")

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.
# –ï—Å–ª–∏ –Ω–µ—Ç, –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –∏ –º—ã –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É.
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not ADMIN_ID:
    raise ValueError("–û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ADMIN_ID_TGBOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- 3. –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---

# –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_FILE = "user_data.xml"
# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—Ä–∞–∫—Ü–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
FACTIONS = ["–±–µ–ª—ã–µ", "–∫—Ä–∞—Å–Ω—ã–µ", "—Å–∏–Ω–∏–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—á—ë—Ä–Ω—ã–µ", "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ"]

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
INFO_TEXT = (
    "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ì–æ–Ω—Ü–∞! üëãüèªüòÉ\n\n"
    "–ì–æ–Ω–µ—Ü –º–æ—ë –ø–µ—Ä–≤–æ–µ –¥–µ—Ç–∏—â–µ, –æ–Ω –ø—Ä–æ—à—ë–ª —Ç–∞–∫–æ–π –¥–æ–ª–≥–∏–π –ø—É—Ç—å –∏ –∞—Ö—Ö~ –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å —Å–ª—ë–∑—ã –≥–æ—Ä–¥–æ—Å—Ç–∏ üò≠\n"
    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üòâ\n"
    "–ï—Å–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ üòä\n"
    "–ê –µ—â—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ \"–ö–æ–¥—Ñ–µ–¥—Ä–∞–ª—å\"! @codhedral üëàüèªüëàüèªüëàüèª"
)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DATA_FILE.
user_manager = UserDataManager(DATA_FILE)

# –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∏–≥—Ä—ã –≤ –æ–¥–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ.
# –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–∏–º –ø–æ ID.
GAMES = {
    "dice": DiceGame("dice", "–≤ –ö–æ—Å—Ç–∏", user_manager),
    "roulette": RouletteGame("roulette", "–≤ –†—É–ª–µ—Ç–∫—É", user_manager),
    "coinflip": CoinFlipGame("coinflip", "–≤ –ú–æ–Ω–µ—Ç–∫—É", user_manager),
    "blackjack": BlackjackGame("blackjack", "–≤ –ë–ª—ç–∫–¥–∂–µ–∫", user_manager),
    "academic_race": AcademicRaceGame("academic_race", "–≤ –ì–æ–Ω–∫–∏ –ê–∫–∞–¥–µ–º–∏–∫–æ–≤", user_manager),
}


# --- 4. –ì–ï–ù–ï–†–ê–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–† ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ.

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='nav:news')],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data='nav:games')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='nav:settings')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='nav:info')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_enabled = user_manager.users.get(user_id, {}).get('auto_bankruptcy_enabled', False)
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∫–æ–Ω–∫—É –Ω–∞ –∫–Ω–æ–ø–∫–µ
    status_icon = "‚úÖ" if is_enabled else "‚ùå"
    status_text = "–í–∫–ª—é—á–µ–Ω–æ" if is_enabled else "–í—ã–∫–ª—é—á–µ–Ω–æ"
    
    keyboard = [
        [InlineKeyboardButton(f"{status_icon} –ê–≤—Ç–æ–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ ({status_text})", callback_data='settings:toggle_autobankrupt')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_news_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    keyboard = [
        [InlineKeyboardButton("ü©∂ (–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)", callback_data='sub:–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ')],
        [InlineKeyboardButton("‚ù§Ô∏è", callback_data='sub:–∫—Ä–∞—Å–Ω—ã–µ'), InlineKeyboardButton("üíö", callback_data='sub:–∑–µ–ª–µ–Ω—ã–µ')],
        [InlineKeyboardButton("ü§ç", callback_data='sub:–±–µ–ª—ã–µ'), InlineKeyboardButton("üíô", callback_data='sub:—Å–∏–Ω–∏–µ'), InlineKeyboardButton("üñ§", callback_data='sub:—á—ë—Ä–Ω—ã–µ')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_info_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞."""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='get_public_stats')],
        [InlineKeyboardButton("‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", callback_data='contact:message')],
        [InlineKeyboardButton("üöÄ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞", callback_data='contact:order')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_games_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–≥—Ä–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    balance = user_manager.get_user_balance(user_id)
    keyboard = [
        [InlineKeyboardButton(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} –¥—É–∫–∞—Ç–æ–≤", callback_data='do_nothing')],
        [InlineKeyboardButton("üí™ –†–∞–±–æ—Ç–∞—Ç—å (+5,000)", callback_data='game:work')],
        [InlineKeyboardButton("üéì –ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤", callback_data='game:start:academic_race')],
        [InlineKeyboardButton("üí∏ –û–±—ä—è–≤–∏—Ç—å –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ (=100)", callback_data='game:bankruptcy')],
        [InlineKeyboardButton("üé≤ –ò–≥—Ä–∞—Ç—å –≤ –ö–æ—Å—Ç–∏", callback_data='game:start:dice')],
        [InlineKeyboardButton("üé° –ò–≥—Ä–∞—Ç—å –≤ –†—É–ª–µ—Ç–∫—É", callback_data='game:start:roulette')],
        [InlineKeyboardButton("ü™ô –ò–≥—Ä–∞—Ç—å –≤ –ú–æ–Ω–µ—Ç–∫—É", callback_data='game:start:coinflip')],
        [InlineKeyboardButton("üÉè –ò–≥—Ä–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫", callback_data='game:start:blackjack')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def generate_public_stats_report() -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç–∞."""
    users = user_manager.get_all_users()
    total_users = len(users)
    total_interactions = sum(user.get('interaction_count', 0) for user in users.values())
    
    faction_counts = {faction: 0 for faction in FACTIONS}
    faction_counts['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏'] = 0
    
    for user_data in users.values():
        faction = user_data.get('faction', 'None')
        if faction in faction_counts:
            faction_counts[faction] += 1
        elif faction == 'None':
             faction_counts['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏'] += 1

    report = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
    report += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
    report += f"üí¨ *–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:* {total_interactions}\n\n"
    report += "üìà *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∫—Ü–∏–π:*\n"
    
    sorted_factions = sorted(faction_counts.items(), key=lambda item: item[1], reverse=True)
    for faction, count in sorted_factions:
        if count > 0:
            report += f"- {faction.capitalize()}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            
    return report

async def track_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º –¥–µ–π—Å—Ç–≤–∏–∏.
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä—è `TypeHandler`.
    """
    if update.effective_user:
        user_manager.update_user_activity(update.effective_user.id)


# --- 6. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î (/) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    reply_markup = get_main_keyboard()
    # –ö–æ–º–∞–Ω–¥–∞ /start –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–∞–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "–≤ –º–µ–Ω—é"
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    elif update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """(–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—Å–µ–º."""
    if str(update.effective_user.id) != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say <—Ñ—Ä–∞–∫—Ü–∏—è|–≤—Å–µ> <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>\n–§—Ä–∞–∫—Ü–∏–∏: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, –±–µ–ª—ã–µ, –∫—Ä–∞—Å–Ω—ã–µ, —Å–∏–Ω–∏–µ, –∑–µ–ª–µ–Ω—ã–µ, —á—ë—Ä–Ω—ã–µ.")
        return

    target_faction = context.args[0].lower()
    message_to_send = " ".join(context.args[1:])
    all_users = user_manager.get_all_users()
    recipients = set()

    if target_faction == "–≤—Å–µ":
        recipients = set(all_users.keys())
    elif target_faction in FACTIONS:
        for sub_id, user_data in all_users.items():
            # "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ" –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            if user_data.get('faction') in [target_faction, '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ']:
                recipients.add(sub_id)
    else:
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: {target_faction}")
        return

    successful_sends = 0
    for recipient_id in recipients:
        try:
            await context.bot.send_message(chat_id=recipient_id, text=message_to_send)
            successful_sends += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
            
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends} –∏–∑ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")

async def stata_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stata.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø—É–±–ª–∏—á–Ω—É—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    user_id = update.effective_user.id

    if str(user_id) == ADMIN_ID:
        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
        period_arg = context.args[0].lower() if context.args else '–≤—Å—è'
        now = datetime.now()
        period_map = {
            '–¥–µ–Ω—å': (now - timedelta(days=1), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"),
            '–Ω–µ–¥–µ–ª—è': (now - timedelta(weeks=1), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
            '–º–µ—Å—è—Ü': (now - timedelta(days=30), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"),
            '–≤—Å—è': (datetime.min, "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
        }

        if period_arg not in period_map:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≤—Å—è.")
            return

        start_date, period_text = period_map[period_arg]
        users = user_manager.get_all_users()
        total_users = len(users)
        new_users_in_period = sum(1 for u in users.values() if datetime.fromisoformat(u['first_seen']) >= start_date)
        active_users_in_period = sum(1 for u in users.values() if datetime.fromisoformat(u['last_seen']) >= start_date)
        total_interactions = sum(u.get('interaction_count', 0) for u in users.values())

        faction_counts = {faction: 0 for faction in FACTIONS + ['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏']}
        for user_data in users.values():
            key = user_data.get('faction', '–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏')
            if key == 'None': key = '–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏'
            if key in faction_counts: faction_counts[key] += 1

        report = f"üìä *–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text}*\n\n"
        report += f"üë§ *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {new_users_in_period}\n"
        report += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {active_users_in_period}\n\n"
        report += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:* {total_users}\n"
        report += f"üí¨ *–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:* {total_interactions}\n\n"
        report += "üìà *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º:*\n"
        for faction, count in faction_counts.items():
            if count > 0: report += f"- {faction.capitalize()}: {count}\n"
        await update.message.reply_text(report, parse_mode='Markdown')

    else:
        # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        is_allowed, time_left = user_manager.check_stats_cooldown(user_id)
        if not is_allowed:
            minutes, seconds = divmod(int(time_left.total_seconds()), 60)
            await update.message.reply_text(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.")
            return

        report = generate_public_stats_report()
        await update.message.reply_text(report, parse_mode='Markdown')


# --- 7. –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò (CALLBACKS) ---

async def nav_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∞–º –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav_target = query.data.split(':')[1]

    if nav_target != 'games' and 'game_state' in context.user_data:
        context.user_data.pop('game_state', None)
    
    elif nav_target == 'games':
        #–ë–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω–∞ —ç—Ç–∞ –æ–ø—Ü–∏—è
        if user_manager.check_and_apply_auto_bankruptcy(user_id):
            await query.answer(
                "–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ 100 –¥—É–∫–∞—Ç–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.",
                show_alert=True
            )

    text, keyboard = "", None
    if nav_target == 'main':
        text, keyboard = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", get_main_keyboard()
    elif nav_target == 'games':
        text, keyboard = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –ö–ª—É–±!", get_games_keyboard(user_id)
    # --- –ù–û–í–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    elif nav_target == 'settings':
        text, keyboard = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è.", get_settings_keyboard(user_id)
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---
    elif nav_target == 'news':
        text, keyboard = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", get_news_keyboard()
    elif nav_target == 'info':
        text, keyboard = INFO_TEXT, get_info_keyboard()

    if text and keyboard:
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)

async def toggle_autobankrupt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_state = user_manager.toggle_auto_bankruptcy(user_id)
    
    status_text = "–í–∫–ª—é—á–µ–Ω–æ" if new_state else "–í—ã–∫–ª—é—á–µ–Ω–æ"
    await query.answer(f"–ê–≤—Ç–æ–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ —Ç–µ–ø–µ—Ä—å {status_text.lower()}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_keyboard = get_settings_keyboard(user_id)
    await query.edit_message_reply_markup(reply_markup=new_keyboard)

async def bankruptcy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û–±—ä—è–≤–∏—Ç—å –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ'."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ
    was_applied = user_manager.apply_bankruptcy_manually(user_id)
    
    if was_applied:
        await query.answer("–í–∞—à–∞ –ø—Ä–æ—Å—å–±–∞ —É—Å–ª—ã—à–∞–Ω–∞! –ë–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ 100 –¥—É–∫–∞—Ç–æ–≤.", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        await query.edit_message_reply_markup(reply_markup=get_games_keyboard(user_id))
    else:
        balance = user_manager.get_user_balance(user_id)
        await query.answer(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—ä—è–≤–∏—Ç—å –æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–µ. –í–∞—à –±–∞–ª–∞–Ω—Å ({balance:,}) –∏ —Ç–∞–∫ –≤ –ø–æ—Ä—è–¥–∫–µ.", show_alert=True)

async def subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    faction = query.data.split(':')[1]
    
    user_manager.set_user_faction(user_id, faction)

    await query.message.delete() # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ—Ä–∞–∫—Ü–∏–π
    
    menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤–æ—Å—Ç—è–º", callback_data='nav:news')
    reply_markup = InlineKeyboardMarkup([[menu_button]])
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ—Ä–∞–∫—Ü–∏–∏: {faction.capitalize()}.",
        reply_markup=reply_markup
    )

async def show_public_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ)."""
    query = update.callback_query
    user_id = query.from_user.id
    is_allowed, time_left = user_manager.check_stats_cooldown(user_id)

    if not is_allowed:
        minutes, seconds = divmod(int(time_left.total_seconds()), 60)
        await query.answer(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫.", show_alert=True)
        return

    await query.answer()
    report = generate_public_stats_report()
    menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:info')
    reply_markup = InlineKeyboardMarkup([[menu_button]])
    await query.edit_message_text(text=report, parse_mode='Markdown', reply_markup=reply_markup)

async def contact_admin_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–∫–∞–∑
    contact_type = query.data.split(':')[1]
    context.user_data['contact_state'] = 'awaiting_admin_message'
    context.user_data['contact_type'] = contact_type

    prompt_text = ("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞." if contact_type == 'message'
                   else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")

    cancel_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:info')
    reply_markup = InlineKeyboardMarkup([[cancel_button]])
    await query.edit_message_text(
        text=f"{prompt_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )


# --- 8. –ò–ì–†–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def work_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–†–∞–±–æ—Ç–∞—Ç—å'. –ù–∞—á–∏—Å–ª—è–µ—Ç –¥–µ–Ω—å–≥–∏ —Å —É—á–µ—Ç–æ–º –∫—É–ª–¥–∞—É–Ω–∞."""
    query = update.callback_query
    user_id = query.from_user.id
    is_allowed, time_left = user_manager.check_work_cooldown(user_id)

    if is_allowed:
        work_bonus = 5000
        user_manager.update_user_balance(user_id, work_bonus)
        await query.answer(f"–í—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ç—Ä—É–¥–∏–ª–∏—Å—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {work_bonus:,} –¥—É–∫–∞—Ç–æ–≤!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        await query.edit_message_reply_markup(reply_markup=get_games_keyboard(user_id))
    else:
        minutes, seconds = divmod(int(time_left.total_seconds()), 60)
        await query.answer(f"–í—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.", show_alert=True)

async def game_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ª—é–±–æ–π –∏–≥—Ä—ã.
    –†–∞–∑–ª–∏—á–∞–µ—Ç –∏–≥—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å—Ç–∞–≤–∫—É, –∏ –∏–≥—Ä—ã –±–µ–∑ –Ω–µ—ë.
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    parts = query.data.split(':') # e.g., 'game:start:dice'
    game_id = parts[2]
    game = GAMES.get(game_id)

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é
    if len(parts) > 3 and parts[3] == 'new':
        context.user_data.pop('current_bet', None)

    if game.requires_bet:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä, –≥–¥–µ –Ω—É–∂–Ω–∞ —Å—Ç–∞–≤–∫–∞ (–∫–æ—Å—Ç–∏, —Ä—É–ª–µ—Ç–∫–∞ –∏ —Ç.–¥.)
        context.user_data['game_state'] = f'awaiting_bet:{game_id}'
        balance = user_manager.get_user_balance(user_id)
        current_bet = context.user_data.get('current_bet', 0)

        text = game.get_rules_text(balance, current_bet)
        keyboard = game.get_game_keyboard(context)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        if current_bet == 0:
            sent_message = await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode='Markdown')
            context.user_data['prompt_message_id'] = sent_message.message_id
        else:
             await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–≥—Ä, –≥–¥–µ —Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞ (–≥–æ–Ω–∫–∏)
        context.user_data['game_state'] = f'in_game_menu:{game_id}'
        balance = user_manager.get_user_balance(user_id)
        
        text = game.get_rules_text(balance, 0)
        keyboard = game.get_game_keyboard(context)
        
        await query.edit_message_text(text=text, reply_markup=keyboard, parse_mode='Markdown')

async def game_modify_bet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ (x2, All-in)."""
    query = update.callback_query
    user_id = query.from_user.id

    parts = query.data.split(':') # e.g., 'game:modify:dice:multiply:2'
    game_id, action = parts[2], parts[3]
    game = GAMES.get(game_id)

    current_bet = context.user_data.get('current_bet', 0)
    if current_bet <= 0:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É!", show_alert=True)
        return

    balance = user_manager.get_user_balance(user_id)
    new_bet = 0
    if action == 'multiply':
        multiplier = int(parts[4])
        new_bet = current_bet * multiplier
    elif action == 'allin':
        new_bet = balance

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å
    if new_bet > balance:
        await query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,}", show_alert=True)
        return # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥

    context.user_data['current_bet'] = new_bet
    await query.answer(f"–°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet:,}")
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞–≤–∫–µ
    await query.edit_message_reply_markup(reply_markup=game.get_game_keyboard(context))

async def game_play_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∞—Å—Å—É.
    """
    query = update.callback_query
    await query.answer() 

    game_id = query.data.split(':')[2]
    game = GAMES.get(game_id)

    if game:
        # –í—Å—è –ª–æ–≥–∏–∫–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞, —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è)
        # —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ .play() –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã.
        await game.play(update, context)
    else:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–∑–æ–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã: {game_id}")


# --- 9. –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---

async def text_message_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = update.effective_user.id
    game_state = context.user_data.get('game_state', '')
    contact_state = context.user_data.get('contact_state')

    # –ú–∞—Ä—à—Ä—É—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–≥—Ä–µ, –∫–æ—Ç–æ—Ä–∞—è –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–æ–Ω–∫–∏ –ê–∫–∞–¥–µ–º–∏–∫–æ–≤)
    if game_state.startswith('awaiting_answer:'):
        game_id = game_state.split(':')[1]
        game = GAMES.get(game_id)
        if game and hasattr(game, 'handle_answer'):
            await game.handle_answer(update, context)
        return

    # –ú–∞—Ä—à—Ä—É—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã
    elif game_state.startswith('awaiting_bet:'):
        game_id = game_state.split(':')[1]
        game = GAMES.get(game_id)
        if not game: return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É"
        prompt_message_id = context.user_data.pop('prompt_message_id', None)
        
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            bet_amount = int(''.join(filter(str.isdigit, update.message.text)))
        except (ValueError, TypeError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
            return

        balance = user_manager.get_user_balance(user_id)
        if not (0 < bet_amount <= balance):
            await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å ({balance:,} –¥—É–∫–∞—Ç–æ–≤).")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –∏ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data['current_bet'] = bet_amount
        context.user_data['game_state'] = 'bet_placed'

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞–≤–∫–æ–π –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        await context.bot.delete_message(chat_id=user_id, message_id=update.message.message_id)
        if prompt_message_id:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=prompt_message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {prompt_message_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∏–≥—Ä—ã
        await context.bot.send_message(
            chat_id=user_id,
            text=game.get_rules_text(balance, bet_amount),
            reply_markup=game.get_game_keyboard(context),
            parse_mode='Markdown'
        )
        return

    # –ú–∞—Ä—à—Ä—É—Ç 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    elif contact_state == 'awaiting_admin_message':
        user = update.effective_user
        user_text = update.message.text
        contact_type = context.user_data.get('contact_type', 'message')
        username_str = f"@{user.username}" if user.username else f"ID: `{user.id}`"

        header = "‚ùóÔ∏è *–ó–∞–∫–∞–∑!*\n\n" if contact_type == 'order' else "‚úâÔ∏è *–ü–∏—Å—å–º–æ!*\n\n"
        admin_message = f"{header}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_str} –ø–∏—à–µ—Ç:\n\n*{user_text}*"

        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message, parse_mode='Markdown')
            menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='nav:main')
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup([[menu_button]]))
        except Exception as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            context.user_data.pop('contact_state', None)
            context.user_data.pop('contact_type', None)
        return

    # –ú–∞—Ä—à—Ä—É—Ç 4 (–ó–∞–≥–ª—É—à–∫–∞): –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ –Ω–∏ –ø–æ–¥ –æ–¥–∏–Ω –∏–∑ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ "–∑–∞–≤–∏—Å—à–∏–µ" –∏–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.pop('game_state', None)
        context.user_data.pop('current_bet', None)

        await update.message.reply_text(
            "ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            reply_markup=get_main_keyboard()
        )


# --- 10. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –í–ï–ë-–°–ï–†–í–ï–†–ê (FLASK) ---

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–æ–≤.
app = Flask(__name__)

# –ó–∞–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö
request_settings = HTTPXRequest(connect_timeout=10.0, read_timeout=60.0)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
application = (
    Application.builder()
    .token(TOKEN)
    .job_queue(JobQueue()) # JobQueue –Ω—É–∂–µ–Ω –¥–ª—è –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–≤ —ç—Ç–æ–º –∫–æ–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –∏–º–µ—Ç—å)
    .request(request_settings)
    .build()
)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---

# –ì—Ä—É–ø–ø–∞ -1: —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º, –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
application.add_handler(TypeHandler(Update, track_user_activity), group=-1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("say", say_command))
application.add_handler(CommandHandler("stata", stata_command))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (callbacks)
application.add_handler(CallbackQueryHandler(nav_handler, pattern='^nav:'))
application.add_handler(CallbackQueryHandler(subscription_handler, pattern='^sub:'))
application.add_handler(CallbackQueryHandler(show_public_stats, pattern='^get_public_stats$'))
application.add_handler(CallbackQueryHandler(contact_admin_start_handler, pattern='^contact:'))

# –ò–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CallbackQueryHandler(work_handler, pattern='^game:work$'))
application.add_handler(CallbackQueryHandler(toggle_autobankrupt_handler, pattern='^settings:toggle_autobankrupt$'))
application.add_handler(CallbackQueryHandler(bankruptcy_handler, pattern='^game:bankruptcy$'))
application.add_handler(CallbackQueryHandler(game_start_handler, pattern=r'^game:start:'))
application.add_handler(CallbackQueryHandler(game_modify_bet_handler, pattern=r'^game:modify:'))
application.add_handler(CallbackQueryHandler(game_play_handler, pattern=r'^game:play:'))

# "–ü—É—Å—Ç—ã—à–∫–∞" –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º)
application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern='^do_nothing$'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_router))


# --- –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ Vercel/Heroku) ---

@app.route('/', methods=['POST'])
async def webhook():
    """
    –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram (–≤–µ–±—Ö—É–∫).
    –û–Ω –ø–æ–ª—É—á–∞–µ—Ç JSON, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –µ–≥–æ –≤ –æ–±—ä–µ–∫—Ç Update –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞—à–µ–º—É –±–æ—Ç—É.
    """
    try:
        update_data = request.get_json(force=True)
        update = Update.de_json(update_data, application.bot)
        await application.process_update(update)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ "–ø–∞–¥–∞–µ–º", —á—Ç–æ–±—ã Telegram –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª –≤–µ–±—Ö—É–∫.
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        
    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'ok' (—Å—Ç–∞—Ç—É—Å 200), —á—Ç–æ–±—ã Telegram –∑–Ω–∞–ª, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
    return 'ok'

@app.route('/', methods=['GET'])
def health_check():
    """
    –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "–∑–¥–æ—Ä–æ–≤—å—è" –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Å—Ç–∏–Ω–≥–∏ –º–æ–≥—É—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞—Ç—å GET-–∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç.
    """
    return "I am alive and ready!"