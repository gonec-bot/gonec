# —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞–∂–º–∏ cntrl+C, —Ç–µ–±–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å –µ—ë –∞–≤–∞—Ä–∏–π–Ω–æ...
#main.py
from dotenv import load_dotenv
import logging
import os
import xml.etree.ElementTree as ET
from xml.dom import minidom
from datetime import datetime, timedelta
import random
from abc import ABC, abstractmethod
from game_base import Game, UserDataManager # –ï—Å–ª–∏ –≤—ã–Ω–µ—Å–ª–∏ UserDataManager
from minigames import DiceGame, RouletteGame, CoinFlipGame # –ï—Å–ª–∏ –≤—ã–Ω–µ—Å–ª–∏ UserDataManager
from blackjack_game import BlackjackGame
from academic_race_game import AcademicRaceGame

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.request import HTTPXRequest
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    TypeHandler,
    MessageHandler,
    filters,
    JobQueue
)

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ò –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ os.getenv() ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID_TGBOT")

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.
# –ï—Å–ª–∏ –Ω–µ—Ç, –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –∏ –º—ã –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É.
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
if not ADMIN_ID:
    raise ValueError("–û—à–∏–±–∫–∞: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ADMIN_ID_TGBOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

DATA_FILE = "user_data.xml"
FACTIONS = ["–±–µ–ª—ã–µ", "–∫—Ä–∞—Å–Ω—ã–µ", "—Å–∏–Ω–∏–µ", "–∑–µ–ª–µ–Ω—ã–µ", "—á—ë—Ä–Ω—ã–µ", "–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ"]


# --- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ---
INFO_TEXT = (
    "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ*\n\n"
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ì–æ–Ω—Ü–∞! üëãüèªüòÉ\n\n"
    "–ì–æ–Ω–µ—Ü –º–æ—ë –ø–µ—Ä–≤–æ–µ –¥–µ—Ç–∏—â–µ, –æ–Ω –ø—Ä–æ—à—ë–ª —Ç–∞–∫–æ–π –¥–æ–ª–≥–∏–π –ø—É—Ç—å –∏ –∞—Ö—Ö~ –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å —Å–ª—ë–∑—ã –≥–æ—Ä–¥–æ—Å—Ç–∏ üò≠\n"
    "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ –º–Ω–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üòâ\n"
    "–ï—Å–ª–∏ –≤–∞–º –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ—Ç –≤—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –º–Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ üòä\n"
    "–ê –µ—â—ë, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ \"–ö–æ–¥—Ñ–µ–¥—Ä–∞–ª—å\"! @codhedral üëàüèªüëàüèªüëàüèª"
)

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ú–ï–ù–ï–î–ñ–ï–† –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–ö–¢–ò–í–ù–û–°–¢–ò ---
user_manager = UserDataManager(DATA_FILE)

async def track_user_activity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user:
        user_manager.update_user_activity(update.effective_user.id)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏–≥—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Ö
GAMES = {
    "dice": DiceGame("dice", "–≤ –ö–æ—Å—Ç–∏", user_manager),
    "roulette": RouletteGame("roulette", "–≤ –†—É–ª–µ—Ç–∫—É", user_manager),
    "coinflip": CoinFlipGame("coinflip", "–≤ –ú–æ–Ω–µ—Ç–∫—É", user_manager),
    "blackjack": BlackjackGame("blackjack", "–≤ –ë–ª—ç–∫–¥–∂–µ–∫", user_manager),
    "academic_race": AcademicRaceGame("academic_race", "–≤ –ì–æ–Ω–∫–∏ –ê–∫–∞–¥–µ–º–∏–∫–æ–≤", user_manager), # <-- –î–û–ë–ê–í–õ–ï–ù–û
}
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê ---

# --- –ì–ï–ù–ï–†–ê–¢–û–†–´ –ö–õ–ê–í–ò–ê–¢–£–† ---
def get_main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data='nav:news')],
                [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data='nav:games')],
                [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='nav:info')]]
    return InlineKeyboardMarkup(keyboard)

def get_news_keyboard() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton("ü©∂ (–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)", callback_data='sub:–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ')],
                [InlineKeyboardButton("‚ù§Ô∏è", callback_data='sub:–∫—Ä–∞—Å–Ω—ã–µ'), InlineKeyboardButton("üíö", callback_data='sub:–∑–µ–ª–µ–Ω—ã–µ')],
                [InlineKeyboardButton("ü§ç", callback_data='sub:–±–µ–ª—ã–µ'), InlineKeyboardButton("üíô", callback_data='sub:—Å–∏–Ω–∏–µ'), InlineKeyboardButton("üñ§", callback_data='sub:—á—ë—Ä–Ω—ã–µ')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]]
    return InlineKeyboardMarkup(keyboard)

def get_info_keyboard() -> InlineKeyboardMarkup:
    keyboard = [[InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='get_public_stats')],
                [InlineKeyboardButton("‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", callback_data='contact:message')],
                [InlineKeyboardButton("üöÄ –ó–∞–∫–∞–∑–∞—Ç—å –±–æ—Ç–∞", callback_data='contact:order')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]]
    return InlineKeyboardMarkup(keyboard)

def get_games_keyboard(user_id: int) -> InlineKeyboardMarkup:
    balance = user_manager.get_user_balance(user_id)
    keyboard = [
        [InlineKeyboardButton(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,} –¥—É–∫–∞—Ç–æ–≤", callback_data='do_nothing')],
        [InlineKeyboardButton("üí™ –†–∞–±–æ—Ç–∞—Ç—å (+5,000)", callback_data='game:work')],
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –≤–µ–¥—É—Ç –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        [InlineKeyboardButton("üéì –ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤", callback_data='game:start:academic_race')], # <-- –ò–ó–ú–ï–ù–ï–ù–û
        [InlineKeyboardButton("üé≤ –ò–≥—Ä–∞—Ç—å –≤ –ö–æ—Å—Ç–∏", callback_data='game:start:dice')],
        [InlineKeyboardButton("üé° –ò–≥—Ä–∞—Ç—å –≤ –†—É–ª–µ—Ç–∫—É", callback_data='game:start:roulette')],
        [InlineKeyboardButton("ü™ô –ò–≥—Ä–∞—Ç—å –≤ –ú–æ–Ω–µ—Ç–∫—É", callback_data='game:start:coinflip')], # <-- –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
        [InlineKeyboardButton("üÉè –ò–≥—Ä–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫", callback_data='game:start:blackjack')], # <-- –î–û–ë–ê–í–õ–ï–ù–û
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:main')]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ì–ï–ù–ï–†–ê–¢–û–† –û–¢–ß–ï–¢–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def generate_public_stats_report() -> str:
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    users = user_manager.get_all_users()
    total_users = len(users)
    total_interactions = sum(user.get('interaction_count', 0) for user in users.values())
    faction_counts = {faction: 0 for faction in FACTIONS}
    faction_counts['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏'] = 0
    for user_data in users.values():
        faction = user_data.get('faction', 'None')
        if faction in faction_counts:
            faction_counts[faction] += 1
        elif faction == 'None':
             faction_counts['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏'] += 1
    report = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
    report += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
    report += f"üí¨ *–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:* {total_interactions}\n\n"
    report += "üìà *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∫—Ü–∏–π:*\n"
    sorted_factions = sorted(faction_counts.items(), key=lambda item: item[1], reverse=True)
    for faction, count in sorted_factions:
        if count > 0:
            report += f"- {faction.capitalize()}: {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
    return report

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö (–±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_markup = get_main_keyboard()
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

async def nav_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav_target = query.data.split(':')[1]

    # –°–±—Ä–æ—Å –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –∏–≥—Ä
    if nav_target != 'games':
        context.user_data.pop('game_state', None)
    elif nav_target == 'games':
        # --- –ù–û–í–´–ô –ë–õ–û–ö: –ü–†–û–í–ï–†–ö–ê –ë–ê–ù–ö–†–û–¢–°–¢–í–ê ---
        if user_manager.check_and_apply_bankruptcy(user_id):
            await query.answer(
                "–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏ –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ 100 –¥—É–∫–∞—Ç–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞.",
                show_alert=True)

    text, keyboard = "", None
    if nav_target == 'main': text, keyboard = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", get_main_keyboard()
    elif nav_target == 'games': text, keyboard = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–≥—Ä–æ–≤–æ–π –ö–ª—É–±!", get_games_keyboard(user_id)
    elif nav_target == 'news': text, keyboard = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", get_news_keyboard()
    elif nav_target == 'info': text, keyboard = INFO_TEXT, get_info_keyboard()

    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown', disable_web_page_preview=True)

# ... (subscription_handler, show_public_stats, stata_command, say_command, contact_admin_start_handler –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    faction = query.data.split(':')[1]
    user_manager.set_user_faction(user_id, faction)

    await query.message.delete()
    menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤–æ—Å—Ç—è–º", callback_data='nav:news')
    reply_markup = InlineKeyboardMarkup([[menu_button]])
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ—Ä–∞–∫—Ü–∏–∏: {faction.capitalize()}.",
        reply_markup=reply_markup
    )

async def show_public_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    is_allowed, time_left = user_manager.check_stats_cooldown(user_id)

    if not is_allowed:
        minutes, seconds = divmod(int(time_left.total_seconds()), 60)
        await query.answer(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –û—Å—Ç–∞–ª–æ—Å—å: {minutes} –º–∏–Ω {seconds} —Å–µ–∫.", show_alert=True)
        return

    await query.answer()
    report = generate_public_stats_report()
    menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:info')
    reply_markup = InlineKeyboardMarkup([[menu_button]])
    await query.edit_message_text(text=report, parse_mode='Markdown', reply_markup=reply_markup)

async def stata_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    if user_id == ADMIN_ID:
        # –ê–¥–º–∏–Ω—Å–∫–∞—è –ª–æ–≥–∏–∫–∞
        period_arg = context.args[0].lower() if context.args else '–≤—Å—è'
        now = datetime.now()
        period_map = {
            '–¥–µ–Ω—å': (now - timedelta(days=1), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å"),
            '–Ω–µ–¥–µ–ª—è': (now - timedelta(weeks=1), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"),
            '–º–µ—Å—è—Ü': (now - timedelta(days=30), "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"),
            '–≤—Å—è': (datetime(2000, 1, 1), "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
        }
        if period_arg not in period_map:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≤—Å—è.")
            return

        start_date, period_text = period_map[period_arg]
        users = user_manager.get_all_users()
        total_users = len(users)
        new_users_in_period = sum(1 for u in users.values() if datetime.fromisoformat(u['first_seen']) >= start_date)
        active_users_in_period = sum(1 for u in users.values() if datetime.fromisoformat(u['last_seen']) >= start_date)
        total_interactions = sum(u.get('interaction_count', 0) for u in users.values())

        faction_counts = {faction: 0 for faction in FACTIONS + ['–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏']}
        for user_data in users.values():
            faction = user_data.get('faction', 'None')
            key = '–ë–µ–∑ —Ñ—Ä–∞–∫—Ü–∏–∏' if faction == 'None' else faction
            if key in faction_counts: faction_counts[key] += 1

        report = f"üìä *–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text}*\n\n"
        report += f"üë§ *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {new_users_in_period}\n"
        report += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {active_users_in_period}\n\n"
        report += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:* {total_users}\n"
        report += f"üí¨ *–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:* {total_interactions}\n\n"
        report += "üìà *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ—Ä–∞–∫—Ü–∏—è–º:*\n"
        for faction, count in faction_counts.items():
            if count > 0: report += f"- {faction.capitalize()}: {count}\n"
        await update.message.reply_text(report, parse_mode='Markdown')

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ª–æ–≥–∏–∫–∞
        is_allowed, time_left = user_manager.check_stats_cooldown(user_id)
        if not is_allowed:
            minutes, seconds = divmod(int(time_left.total_seconds()), 60)
            await update.message.reply_text(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.")
            return

        report = generate_public_stats_report()
        await update.message.reply_text(report, parse_mode='Markdown')

async def say_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say <—Ñ—Ä–∞–∫—Ü–∏—è|–≤—Å–µ> <–≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ>\n–§—Ä–∞–∫—Ü–∏–∏: –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ, –±–µ–ª—ã–µ, –∫—Ä–∞—Å–Ω—ã–µ, —Å–∏–Ω–∏–µ, –∑–µ–ª–µ–Ω—ã–µ, —á—ë—Ä–Ω—ã–µ.")
        return
    target_faction = args[0].lower()
    message_to_send = " ".join(args[1:])
    all_users = user_manager.get_all_users()
    recipients = set()
    if target_faction == "–≤—Å–µ":
        recipients = set(all_users.keys())
    elif target_faction in FACTIONS:
        for sub_id, user_data in all_users.items():
            if user_data.get('faction') in [target_faction, '–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ']:
                recipients.add(sub_id)
    else:
        await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: {target_faction}")
        return

    successful_sends = 0
    for recipient_id in recipients:
        try:
            await context.bot.send_message(chat_id=recipient_id, text=message_to_send)
            successful_sends += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}: {e}")
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successful_sends} –∏–∑ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")

async def contact_admin_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    contact_type = query.data.split(':')[1]
    context.user_data['contact_state'] = 'awaiting_admin_message'
    context.user_data['contact_type'] = contact_type

    prompt_text = ("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞." if contact_type == 'message'
                   else "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")

    cancel_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='nav:info')
    reply_markup = InlineKeyboardMarkup([[cancel_button]])
    await query.edit_message_text(
        text=f"{prompt_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        reply_markup=reply_markup
    )


# --- <<< –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ò–ì–†–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò >>> ---
async def work_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    query = update.callback_query
    user_id = query.from_user.id
    is_allowed, time_left = user_manager.check_work_cooldown(user_id)
    if is_allowed:
        work_bonus = 5000
        user_manager.update_user_balance(user_id, work_bonus)
        await query.answer(f"–í—ã —Å–ª–∞–≤–Ω–æ –ø–æ—Ç—Ä—É–¥–∏–ª–∏—Å—å –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {work_bonus:,} –¥—É–∫–∞—Ç–æ–≤!", show_alert=True)
        await query.edit_message_reply_markup(reply_markup=get_games_keyboard(user_id))
    else:
        minutes, seconds = divmod(int(time_left.total_seconds()), 60)
        await query.answer(f"–í—ã —Å–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω {seconds} —Å–µ–∫.", show_alert=True)

async def game_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª—é–±—É—é –∏–≥—Ä—É.
    –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –¥–ª—è –∏–≥—Ä, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å—Ç–∞–≤–∫—É, –∏ –∏–≥—Ä –±–µ–∑ —Å—Ç–∞–≤–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # --- –®–∞–≥ 1: –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
    parts = query.data.split(':')
    game_id = parts[2]
    game = GAMES.get(game_id)

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª "–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ
    if len(parts) > 3 and parts[3] == 'new':
        context.user_data.pop('current_bet', None)

    # --- –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∏–≥—Ä–∞ —Å—Ç–∞–≤–∫—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π —Ñ–ª–∞–≥!) ---
    if game.requires_bet:
        # --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ò–ì–† –°–û –°–¢–ê–í–ö–ê–ú–ò (–ö–æ—Å—Ç–∏, –†—É–ª–µ—Ç–∫–∞ –∏ —Ç.–¥.) ---
        context.user_data['game_state'] = f'awaiting_bet:{game_id}'
        balance = user_manager.get_user_balance(user_id)
        current_bet = context.user_data.get('current_bet', 0)

        text = game.get_rules_text(balance, current_bet)
        keyboard = game.get_game_keyboard(context)

        await query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∏ –µ—â–µ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –µ–≥–æ –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å
        if current_bet == 0:
            sent_message = await query.get_message()
            context.user_data['prompt_message_id'] = sent_message.message_id

    else:
        # --- –õ–û–ì–ò–ö–ê –î–õ–Ø –ò–ì–† –ë–ï–ó –°–¢–ê–í–û–ö (–ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤) ---
        context.user_data['game_state'] = f'in_game_menu:{game_id}' # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

        balance = user_manager.get_user_balance(user_id)
        text = game.get_rules_text(balance, 0) # –°—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ 0
        keyboard = game.get_game_keyboard(context) # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å!"

        await query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

async def game_modify_bet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ (x2, All-in)."""
    query = update.callback_query
    user_id = query.from_user.id

    parts = query.data.split(':') # game:modify:dice:multiply:2 –∏–ª–∏ game:modify:roulette:allin
    game_id, action = parts[2], parts[3]
    game = GAMES.get(game_id)

    current_bet = context.user_data.get('current_bet', 0)
    if current_bet <= 0:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É!", show_alert=True)
        return

    balance = user_manager.get_user_balance(user_id)
    new_bet = 0
    if action == 'multiply':
        multiplier = int(parts[4])
        new_bet = current_bet * multiplier
    elif action == 'allin':
        new_bet = balance

    if new_bet > balance:
        await query.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:,}", show_alert=True)
        new_bet = current_bet # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç

    if new_bet == current_bet and action != 'allin':
         await query.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.", show_alert=True)
         return

    context.user_data['current_bet'] = new_bet
    await query.answer(f"–°—Ç–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_bet:,}")
    await query.edit_message_reply_markup(reply_markup=game.get_game_keyboard(context))

async def game_play_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä—ã.
    –¢–µ–ø–µ—Ä—å –æ–Ω –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å, –∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —ç—Ç–æ –∫–ª–∞—Å—Å—É –∏–≥—Ä—ã.
    """
    query = update.callback_query
    await query.answer() # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –Ω–µ "–∑–∞–≤–∏—Å–∞–ª–∞"

    game_id = query.data.split(':')[2]
    game = GAMES.get(game_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞–≤–∫–∏ –∏ –µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
    # –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ .play() –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    if game:
        await game.play(update, context)
    else:
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–∑–æ–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã: {game_id}")


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê ---
async def text_message_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç 4 –º–∞—Ä—à—Ä—É—Ç–∞: –æ—Ç–≤–µ—Ç –≤ –∏–≥—Ä–µ, —Å—Ç–∞–≤–∫–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    user_id = update.effective_user.id
    game_state = context.user_data.get('game_state', '')
    contact_state = context.user_data.get('contact_state')

    # –ú–∞—Ä—à—Ä—É—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –∏–≥—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ì–æ–Ω–∫–∞—Ö)
    if game_state.startswith('awaiting_answer:'):
        game_id = game_state.split(':')[1]
        game = GAMES.get(game_id)
        if game and hasattr(game, 'handle_answer'):
            await game.handle_answer(update, context)
        return

    # –ú–∞—Ä—à—Ä—É—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç —Å—Ç–∞–≤–∫—É –≤ –∏–≥—Ä–µ
    elif game_state.startswith('awaiting_bet:'):
        game_id = game_state.split(':')[1]
        game = GAMES.get(game_id)
        if not game: return

        prompt_message_id = context.user_data.pop('prompt_message_id', None)
        try:
            bet_amount = int(''.join(filter(str.isdigit, update.message.text)))
        except (ValueError, TypeError):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.")
            return

        balance = user_manager.get_user_balance(user_id)
        if not (0 < bet_amount <= balance):
            await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å ({balance:,} –¥—É–∫–∞—Ç–æ–≤).")
            return

        context.user_data['current_bet'] = bet_amount
        context.user_data['game_state'] = 'bet_placed'

        await context.bot.delete_message(chat_id=user_id, message_id=update.message.message_id)
        if prompt_message_id:
            try: await context.bot.delete_message(chat_id=user_id, message_id=prompt_message_id)
            except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {prompt_message_id}: {e}")

        await context.bot.send_message(
            chat_id=user_id,
            text=game.get_rules_text(balance, bet_amount),
            reply_markup=game.get_game_keyboard(context),
            parse_mode='Markdown'
        )
        return

    # –ú–∞—Ä—à—Ä—É—Ç 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –∞–¥–º–∏–Ω—É
    elif contact_state == 'awaiting_admin_message':
        user = update.effective_user
        user_text = update.message.text
        contact_type = context.user_data.get('contact_type', 'message')
        username_str = f"@{user.username}" if user.username else f"ID: `{user.id}`"

        header = "‚ùóÔ∏è *–ó–∞–∫–∞–∑!*\n\n" if contact_type == 'order' else "‚úâÔ∏è *–ü–∏—Å—å–º–æ!*\n\n"
        admin_message = f"{header}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username_str} –ø–∏—à–µ—Ç:\n\n*{user_text}*"

        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message, parse_mode='Markdown')
            menu_button = InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='nav:main')
            await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=InlineKeyboardMarkup([[menu_button]]))
        except Exception as e:
            logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        finally:
            context.user_data.pop('contact_state', None)
            context.user_data.pop('contact_type', None)
        return # –í–∞–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å return

    # --- –ù–û–í–´–ô –ë–õ–û–ö: –ú–∞—Ä—à—Ä—É—Ç 4 (–ó–∞–≥–ª—É—à–∫–∞) ---
    # –≠—Ç–æ—Ç –±–ª–æ–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å.
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ "–∑–∞–≤–∏—Å—à–∏–µ" –∏–≥—Ä–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.pop('game_state', None)
        context.user_data.pop('current_bet', None)

        await update.message.reply_text(
            "ü§ñ –Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?",
            reply_markup=get_main_keyboard() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        )

def main() -> None:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    # connect_timeout - –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    # read_timeout - –≤—Ä–µ–º—è –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ polling_timeout)
    # pool_timeout - –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
    request = HTTPXRequest(
        connect_timeout=10.0,
        read_timeout=60.0,
        pool_timeout=None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è –ø—É–ª–∞
    )

    application = (
        Application.builder()
        .token(TOKEN)
        .job_queue(JobQueue())
        .request(request)
        .build()
    )

    application.add_handler(TypeHandler(Update, track_user_activity), group=-1)

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("say", say_command))
    application.add_handler(CommandHandler("stata", stata_command))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(nav_handler, pattern='^nav:'))
    application.add_handler(CallbackQueryHandler(subscription_handler, pattern='^sub:'))
    application.add_handler(CallbackQueryHandler(show_public_stats, pattern='^get_public_stats$'))
    application.add_handler(CallbackQueryHandler(contact_admin_start_handler, pattern='^contact:'))
    application.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern='^do_nothing$'))

    # –ò–≥—Ä–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
    application.add_handler(CallbackQueryHandler(work_handler, pattern='^game:work$'))
    application.add_handler(CallbackQueryHandler(game_start_handler, pattern=r'^game:start:'))
    application.add_handler(CallbackQueryHandler(game_modify_bet_handler, pattern=r'^game:modify:'))
    application.add_handler(CallbackQueryHandler(game_play_handler, pattern=r'^game:play:'))

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_router))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()