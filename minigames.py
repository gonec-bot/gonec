from game_base import *

# --- –ò–ì–†–û–í–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ---
ROULETTE_PAYOUT_GREEN = 36
ROULETTE_PAYOUT_COLOR = 2
ROULETTE_RED_NUMBERS = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
ROULETTE_BLACK_NUMBERS = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]

class DiceGame(Game):
    def get_rules_text(self, balance: int, bet: int) -> str:
        bet_text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{bet:,}* –¥—É–∫–∞—Ç–æ–≤." if bet > 0 else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å."
        return (
            f"üé≤ *–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏* üé≤\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:,}* –¥—É–∫–∞—Ç–æ–≤.\n"
            f"{bet_text}\n\n"
            "*–ü—Ä–∞–≤–∏–ª–∞:*\n"
            "- –°—É–º–º–∞ 3 –∫—É–±–∏–∫–æ–≤ *> 12*: –≤—ã–∏–≥—Ä—ã—à *x2*.\n"
            "- –°—É–º–º–∞ 3 –∫—É–±–∏–∫–æ–≤ *< 12*: –≤—ã —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É.\n"
            "- –°—É–º–º–∞ = *12*: –≤—ã–∏–≥—Ä—ã—à *x0.5* (–≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–∞–≤–∫–∏).\n"
            "- *2* –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫—É–±–∏–∫–∞ (–ø–∞—Ä–∞): –Ω–∏—á—å—è, —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n"
            "- *3* –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫—É–±–∏–∫–∞ (—Ç—Ä–æ–π–∫–∞): –≤—ã–∏–≥—Ä—ã—à *x10*."
        )

    def get_game_keyboard(self, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        current_bet = context.user_data.get('current_bet', 0)
        bet_text = f"–°—Ç–∞–≤–∫–∞: {current_bet:,} –¥—É–∫–∞—Ç–æ–≤" if current_bet > 0 else "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
        keyboard = [
            [InlineKeyboardButton(bet_text, callback_data='do_nothing')],
            [InlineKeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏!", callback_data=f'game:play:{self.id}')],
            [
                InlineKeyboardButton("x2", callback_data=f'game:modify:{self.id}:multiply:2'),
                InlineKeyboardButton("x10", callback_data=f'game:modify:{self.id}:multiply:10'),
                InlineKeyboardButton("x50", callback_data=f'game:modify:{self.id}:multiply:50'),
            ],
            [InlineKeyboardButton("üí• ALL-IN üí•", callback_data=f'game:modify:{self.id}:allin')],
            [
                InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=f'game:start:{self.id}:new'),
                InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data='nav:games')
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        bet = context.user_data.get('current_bet', 0)

        self.user_manager.update_user_balance(user_id, -bet)
        d1, d2, d3 = random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)
        dice_sum = d1 + d2 + d3
        dice_icons = {1: '‚öÄ', 2: '‚öÅ', 3: '‚öÇ', 4: '‚öÉ', 5: '‚öÑ', 6: '‚öÖ'}
        result_text = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: *{bet:,}*\n–í—ã–ø–∞–ª–æ: {dice_icons[d1]} {dice_icons[d2]} {dice_icons[d3]} = *{dice_sum}*\n\n"
        
        winnings = 0
        if d1 == d2 == d3:
            winnings = bet * 10
            result_text += f"üí∞ *–¢–†–û–ô–ö–ê!* –í—ã–∏–≥—Ä—ã—à *x10*: `+{winnings:,}`"
        elif d1 == d2 or d1 == d3 or d2 == d3:
            winnings = bet
            result_text += f"üòê *–ü–ê–†–ê!* –ù–∏—á—å—è, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: `+{winnings:,}`"
        elif dice_sum > 12:
            winnings = bet * 2
            result_text += f"üéâ *–ü–û–ë–ï–î–ê!* –°—É–º–º–∞ –±–æ–ª—å—à–µ 12. –í—ã–∏–≥—Ä—ã—à *x2*: `+{winnings:,}`"
        elif dice_sum == 12:
            winnings = int(bet * 0.5)
            result_text += f"ü§î *–°–£–ú–ú–ê 12!* –í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–æ–≤–∏–Ω—ã —Å—Ç–∞–≤–∫–∏: `+{winnings:,}`"
        else:
            winnings = 0
            result_text += f"üò• *–ü–û–†–ê–ñ–ï–ù–ò–ï!* –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: `0`"
        
        if winnings > 0:
            self.user_manager.update_user_balance(user_id, winnings)
        
        final_balance = self.user_manager.get_user_balance(user_id)
        result_text += f"\n\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{final_balance:,}* –¥—É–∫–∞—Ç–æ–≤."
        await query.edit_message_text(result_text, reply_markup=self.get_replay_keyboard(), parse_mode='Markdown')

class RouletteGame(Game):
    def get_rules_text(self, balance: int, bet: int) -> str:
        bet_text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{bet:,}* –¥—É–∫–∞—Ç–æ–≤." if bet > 0 else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å."
        return (
            f"üé° *–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞* üé°\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:,}* –¥—É–∫–∞—Ç–æ–≤.\n"
            f"{bet_text}\n\n"
            f"*–ü—Ä–∞–≤–∏–ª–∞:*\n"
            f"- *–ö—Ä–∞—Å–Ω–æ–µ* –∏–ª–∏ *–ß—ë—Ä–Ω–æ–µ*: –≤—ã–∏–≥—Ä—ã—à *x{ROULETTE_PAYOUT_COLOR}*.\n"
            f"- *–ó–µ–ª—ë–Ω–æ–µ (–ó–µ—Ä–æ)*: –≤—ã–∏–≥—Ä—ã—à *x{ROULETTE_PAYOUT_GREEN}*."
        )

    def get_game_keyboard(self, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        current_bet = context.user_data.get('current_bet', 0)
        bet_text = f"–°—Ç–∞–≤–∫–∞: {current_bet:,}" if current_bet > 0 else "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
        keyboard = [
            [InlineKeyboardButton(bet_text, callback_data='do_nothing')],
            [
                InlineKeyboardButton(f"üî¥ –ö—Ä–∞—Å–Ω–æ–µ", callback_data=f'game:play:{self.id}:red'),
                InlineKeyboardButton(f"‚ö´Ô∏è –ß—ë—Ä–Ω–æ–µ", callback_data=f'game:play:{self.id}:black')
            ],
            [InlineKeyboardButton(f"üü¢ –ó–µ—Ä–æ", callback_data=f'game:play:{self.id}:green')],
            [
                InlineKeyboardButton("x2", callback_data=f'game:modify:{self.id}:multiply:2'),
                InlineKeyboardButton("x10", callback_data=f'game:modify:{self.id}:multiply:10'),
                InlineKeyboardButton("x50", callback_data=f'game:modify:{self.id}:multiply:50'),
            ],
            [InlineKeyboardButton("üí• ALL-IN üí•", callback_data=f'game:modify:{self.id}:allin')],
            [InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=f'game:start:{self.id}:new')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data='nav:games')]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        bet = context.user_data.get('current_bet', 0)
        
        self.user_manager.update_user_balance(user_id, -bet)
        roll = random.randint(0, 36)
        
        winning_color, winning_color_icon = None, ""
        if roll == 0: winning_color, winning_color_icon = "green", "üü¢"
        elif roll in ROULETTE_RED_NUMBERS: winning_color, winning_color_icon = "red", "üî¥"
        else: winning_color, winning_color_icon = "black", "‚ö´Ô∏è"
            
        result_text = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: *{bet:,}*\n–í—ã–ø–∞–ª–æ: {winning_color_icon} *{roll} {winning_color.capitalize()}*\n\n"
        
        player_choice = query.data.split(':')[-1]
        winnings = 0
        if player_choice == winning_color:
            payout = ROULETTE_PAYOUT_GREEN if winning_color == "green" else ROULETTE_PAYOUT_COLOR
            winnings = bet * payout
            result_text += f"üéâ *–ü–û–ë–ï–î–ê!* –í–∞—à –≤—ã–∏–≥—Ä—ã—à: `+{winnings:,}`"
        else:
            result_text += f"üò• *–ü–û–†–ê–ñ–ï–ù–ò–ï!* –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: `0`"

        if winnings > 0:
            self.user_manager.update_user_balance(user_id, winnings)
            
        final_balance = self.user_manager.get_user_balance(user_id)
        result_text += f"\n\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{final_balance:,}* –¥—É–∫–∞—Ç–æ–≤."
        await query.edit_message_text(result_text, reply_markup=self.get_replay_keyboard(), parse_mode='Markdown')

class CoinFlipGame(Game):
    def get_rules_text(self, balance: int, bet: int) -> str:
        bet_text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: *{bet:,}* –¥—É–∫–∞—Ç–æ–≤." if bet > 0 else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å."
        return (
            f"ü™ô *–û—Ä—ë–ª –∏–ª–∏ –†–µ—à–∫–∞* ü™ô\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: *{balance:,}* –¥—É–∫–∞—Ç–æ–≤.\n"
            f"{bet_text}\n\n"
            f"*–ü—Ä–∞–≤–∏–ª–∞:*\n"
            f"- –°—Ç–∞–≤–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω. –£–≥–∞–¥–∞–ª–∏ - –≤—ã–∏–≥—Ä—ã—à *x2*.\n"
            f"- –ù–µ —É–≥–∞–¥–∞–ª–∏ - —Ç–µ—Ä—è–µ—Ç–µ —Å—Ç–∞–≤–∫—É."
        )

    def get_game_keyboard(self, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        current_bet = context.user_data.get('current_bet', 0)
        bet_text = f"–°—Ç–∞–≤–∫–∞: {current_bet:,}" if current_bet > 0 else "–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É!"
        keyboard = [
            [InlineKeyboardButton(bet_text, callback_data='do_nothing')],
            [
                InlineKeyboardButton("ü¶Ö –û—Ä—ë–ª", callback_data=f'game:play:{self.id}:heads'),
                InlineKeyboardButton("ü™ô –†–µ—à–∫–∞", callback_data=f'game:play:{self.id}:tails')
            ],
            [
                InlineKeyboardButton("x2", callback_data=f'game:modify:{self.id}:multiply:2'),
                InlineKeyboardButton("x10", callback_data=f'game:modify:{self.id}:multiply:10'),
                InlineKeyboardButton("x50", callback_data=f'game:modify:{self.id}:multiply:50'),
            ],
            [InlineKeyboardButton("üí• ALL-IN üí•", callback_data=f'game:modify:{self.id}:allin')],
            [InlineKeyboardButton("‚úèÔ∏è –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data=f'game:start:{self.id}:new')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏", callback_data='nav:games')]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        user_id = query.from_user.id
        bet = context.user_data.get('current_bet', 0)

        self.user_manager.update_user_balance(user_id, -bet)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫
        result = random.choice(['heads', 'tails'])
        player_choice = query.data.split(':')[-1]

        result_icon = "ü¶Ö" if result == 'heads' else "ü™ô"
        result_word = "–û—Ä—ë–ª" if result == 'heads' else "–†–µ—à–∫–∞"
        result_text = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: *{bet:,}*\n–ú–æ–Ω–µ—Ç–∫–∞ –ø–æ–¥–±—Ä–æ—à–µ–Ω–∞... –í—ã–ø–∞–ª: {result_icon} *{result_word}*!\n\n"

        winnings = 0
        if player_choice == result:
            winnings = bet * 2
            result_text += f"üéâ *–ü–û–ë–ï–î–ê!* –í—ã —É–≥–∞–¥–∞–ª–∏! –í–∞—à –≤—ã–∏–≥—Ä—ã—à: `+{winnings:,}`"
        else:
            winnings = 0
            result_text += f"üò• *–ü–û–†–ê–ñ–ï–ù–ò–ï!* –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç: `0`"
        
        if winnings > 0:
            self.user_manager.update_user_balance(user_id, winnings)
        
        final_balance = self.user_manager.get_user_balance(user_id)
        result_text += f"\n\n–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: *{final_balance:,}* –¥—É–∫–∞—Ç–æ–≤."
        await query.edit_message_text(result_text, reply_markup=self.get_replay_keyboard(), parse_mode='Markdown')
