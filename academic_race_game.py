# –§–∞–π–ª: academic_race_game.py
"""
–°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–≥—Ä—ã "–ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤".

–≠—Ç–∞ –∏–≥—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç–∞–≤–∫–∏ –∏ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.
–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç.
- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Ç—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞.
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Ç–∞–π–º-–∞—É—Ç–µ.
- –ü–æ–ª–Ω–æ–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º-–∞—É—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞–≤–∏—Å–∞–Ω–∏—è" –∏–≥—Ä—ã.
"""

# --- 1. –ò–ú–ü–û–†–¢–´ ---

import random
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∞–π–ø-—Ö–∏–Ω—Ç–∏–Ω–≥–∞
from typing import Tuple

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from game_base import Game, UserDataManager


# --- 2. –ö–õ–ê–°–° –ò–ì–†–´ ---

class AcademicRaceGame(Game):
    """
    –ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ª–æ–≥–∏–∫—É –∏–≥—Ä—ã "–ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤".
    """
    # –ê—Ç—Ä–∏–±—É—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞: —ç—Ç–∞ –∏–≥—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏.
    requires_bet = False
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –≤—Å–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞ –∏–≥—Ä–∞ —Ö—Ä–∞–Ω–∏—Ç –≤ context.user_data.
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã.
    _RACE_STATE_KEYS = [
        'game_state',
        'race_answer',
        'race_deadline',
        'race_reward',
        'race_message_id',
        'race_timeout_count'
    ]

    def __init__(self, game_id: str, name: str, user_manager_instance: UserDataManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã "–ì–æ–Ω–∫–∏ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤".
        """
        super().__init__(game_id, name, user_manager_instance)
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã
        self.initial_reward = 100
        self.time_limit_seconds = 10
        self.max_timeouts = 3

    # --- 3. –ú–ï–¢–û–î–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ù–¢–ï–†–§–ï–ô–°–ê ---

    @staticmethod
    def generate_academic_problem() -> Tuple[str, int]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –∏ –µ—ë —Ä–µ—à–µ–Ω–∏–µ.
        –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã.

        Returns:
            tuple[str, int]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
        """
        pattern = random.randint(1, 4)
        # –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª `\u00A0` –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram.
        if pattern == 1: # (a + b) * c
            a, b, c = random.randint(10, 50), random.randint(10, 50), random.randint(2, 9)
            problem_str = f"({a}\u00A0+\u00A0{b})\u00A0—Ö\u00A0{c}"
            answer = (a + b) * c
        elif pattern == 2: # a * b - c
            a, b, c = random.randint(20, 60), random.randint(2, 9), random.randint(10, 100)
            problem_str = f"{a}\u00A0—Ö\u00A0{b}\u00A0‚àí\u00A0{c}"
            answer = a * b - c
        elif pattern == 3: # sqrt(a) + b
            a = random.choice([4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225])
            b = random.randint(10, 30)
            problem_str = f"‚àö{a}\u00A0+\u00A0{b}"
            answer = int(a**0.5 + b)
        else: # x * a = result
            a, b = random.randint(2, 10), random.randint(10, 50)
            result = a * b
            problem_str = f"—Ö\u00A0¬∑\u00A0{a}\u00A0=\u00A0{result}"
            answer = b
            
        question = f"–ß–µ–º—É —Ä–∞–≤–µ–Ω **—Ö** –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏–∏: **{problem_str}**?" if pattern == 4 else f"–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: **{problem_str}**"
        return question, answer

    def get_rules_text(self, balance: int, bet: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–≥—Ä—ã –ø–µ—Ä–µ–¥ –µ—ë –Ω–∞—á–∞–ª–æ–º.
        –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Game.
        """
        return (
            f"üéì *–ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –≥–æ–Ω–∫–∞ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤!*\n\n"
            f"–í–∞–º –¥–∞—ë—Ç—Å—è *{self.time_limit_seconds} —Å–µ–∫—É–Ω–¥* –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏. "
            f"–ï—Å–ª–∏ –≤—ã –Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç–µ, –≥–æ–Ω–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ.\n\n"
            f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ—Å–ª–µ *{self.max_timeouts}* –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ –≥–æ–Ω–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
            "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è. –ì–æ–Ω–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –æ—à–∏–±—ë—Ç–µ—Å—å. –£–¥–∞—á–∏!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å!', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ."
        )
    
    def get_game_keyboard(self, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã.
        –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Game.
        """
        keyboard = [
            [InlineKeyboardButton("üèÅ –ù–∞—á–∞—Ç—å!", callback_data=f'game:play:{self.id}')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ò–≥—Ä–æ–≤–æ–π –ö–ª—É–±", callback_data='nav:games')]
        ]
        return InlineKeyboardMarkup(keyboard)

    # --- 4. –û–°–ù–û–í–ù–ê–Ø –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---

    async def play(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –∏–≥—Ä—É. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å!".
        –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Game.
        """
        query = update.callback_query
        await query.answer("–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏
        context.user_data['game_state'] = f'awaiting_answer:{self.id}'
        context.user_data['race_reward'] = self.initial_reward
        context.user_data['race_timeout_count'] = 0 # –°—á—ë—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        text = (
            f"üéì *–ì–æ–Ω–∫–∞ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤!*\n\n"
            f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{self.initial_reward:,}* –¥—É–∫–∞—Ç–æ–≤!\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å *{self.time_limit_seconds} —Å–µ–∫—É–Ω–¥*, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É:"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥
        await self._start_or_continue_round(context, query.message.chat_id, text, query.message.message_id)

    async def handle_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∑–∞–¥–∞—á—É.
        """
        user_id = update.effective_user.id
        correct_answer = context.user_data.get('race_answer')
        deadline = context.user_data.get('race_deadline')
        current_reward = context.user_data.get('race_reward')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –æ—Ç–≤–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É)
        if not deadline or datetime.now() > deadline:
            await update.message.reply_text("‚åõÔ∏è –í—ã –æ–ø–æ–∑–¥–∞–ª–∏. –≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ—à–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è –≤—ã—à–µ.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º
        try:
            user_answer = int(update.message.text.strip())
        except (ValueError, TypeError):
            self._cleanup_race_state(context)
            await update.message.reply_text(
                f"‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!* –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: **{correct_answer}**. –ì–æ–Ω–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.",
                reply_markup=self.get_replay_keyboard(), parse_mode='Markdown'
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
        if user_answer == correct_answer:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
            context.user_data['race_timeout_count'] = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            self.user_manager.update_user_balance(user_id, current_reward)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            new_reward = int(current_reward * 3.14)
            context.user_data['race_reward'] = new_reward
            text = (
                f"‚úÖ *–í–µ—Ä–Ω–æ!* –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ *{current_reward:,}* –¥—É–∫–∞—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!\n\n"
                f"üéì *–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!*\n–ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: *{new_reward:,}* –¥—É–∫–∞—Ç–æ–≤!\n\n"
                f"–£ –≤–∞—Å –µ—Å—Ç—å *{self.time_limit_seconds} —Å–µ–∫—É–Ω–¥*:"
            )
            await self._start_or_continue_round(context, update.effective_chat.id, text)
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
            self._cleanup_race_state(context)
            await update.message.reply_text(
                f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª: **{correct_answer}**. –ì–æ–Ω–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.",
                reply_markup=self.get_replay_keyboard(), parse_mode='Markdown'
            )

    # --- 5. –õ–û–ì–ò–ö–ê –¢–ê–ô–ú–ï–†–ê –ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ï–ú ---

    async def timeout_new_problem(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ç–∞–π–º–µ—Ä—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.
        –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏ –ª–∏–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–æ–Ω–∫—É, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ—ë.
        """
        job_data = context.job.data
        chat_id = job_data['chat_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª—å–Ω–∞ –ª–∏ –µ—â–µ –∏–≥—Ä–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —É–∂–µ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å)
        if context.user_data.get('game_state') != f'awaiting_answer:{self.id}':
            return
            
        context.user_data['race_timeout_count'] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if context.user_data['race_timeout_count'] >= self.max_timeouts:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=job_data['message_id'],
                text="üèÅ *–ì–æ–Ω–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.*\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
                reply_markup=self.get_replay_keyboard(),
                parse_mode='Markdown'
            )
            self._cleanup_race_state(context)
            return

        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –≥–æ–Ω–∫—É –∑–∞–Ω–æ–≤–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π
        context.user_data['race_reward'] = self.initial_reward
        text = (
            f"‚åõÔ∏è *–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.* (–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ: {context.user_data['race_timeout_count']}/{self.max_timeouts})\n\n"
            f"üéì *–ì–æ–Ω–∫–∞ –∞–∫–∞–¥–µ–º–∏–∫–æ–≤!*\n–ù–∞–≥—Ä–∞–¥–∞: *{self.initial_reward:,}* –¥—É–∫–∞—Ç–æ–≤!\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å *{self.time_limit_seconds} —Å–µ–∫—É–Ω–¥*:"
        )
        await self._start_or_continue_round(context, chat_id, text)

    def _cleanup_race_state(self, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–Ω–∫–∏: —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ user_data –∏ –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–∞–π–º–µ—Ä.
        """
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
        job_name = f'race_timeout_{context._chat_id}_{context._user_id}'
        current_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in current_jobs:
            job.schedule_removal()
            
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≥–æ–Ω–∫–æ–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for key in self._RACE_STATE_KEYS:
            context.user_data.pop(key, None)
            
    async def _start_or_continue_round(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str, message_id: int = None) -> None:
        """
        –ü—Ä–∏–≤–∞—Ç–Ω—ã–π helper-–º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞.
        –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ user_data,
        –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞.
        """
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        # –ï—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –±–µ—Ä–µ–º –∏–∑ user_data (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤)
        if message_id is None:
            message_id = context.user_data.get('race_message_id')
        if message_id is None:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ message_id –¥–ª—è —á–∞—Ç–∞ {chat_id}, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–æ–Ω–∫—É.")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        problem, answer = self.generate_academic_problem()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ user_data
        context.user_data['race_answer'] = answer
        context.user_data['race_deadline'] = datetime.now() + timedelta(seconds=self.time_limit_seconds)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∫ –Ω–µ–º—É –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        full_text = f"{text}\n\n{problem}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        msg = await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=full_text,
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        context.user_data['race_message_id'] = msg.message_id
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –≤–æ–≤—Ä–µ–º—è
        job_name = f'race_timeout_{chat_id}_{context._user_id}'
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        context.job_queue.run_once(
            self.timeout_new_problem,
            self.time_limit_seconds,
            chat_id=chat_id,
            user_id=context._user_id,
            name=job_name,
            data={'chat_id': chat_id, 'message_id': msg.message_id}
        )